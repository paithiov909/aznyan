// Generated by cpp11: do not edit by hand
// clang-format off

#include "aznyan_types.h"
#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// blur.cpp
cpp11::raws azny_medianblur(cpp11::raws png, int ksize);
extern "C" SEXP _aznyan_azny_medianblur(SEXP png, SEXP ksize) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_medianblur(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(ksize)));
  END_CPP11
}
// blur.cpp
cpp11::raws azny_boxblur(cpp11::raws png, int boxW, int boxH, bool normalize, int border);
extern "C" SEXP _aznyan_azny_boxblur(SEXP png, SEXP boxW, SEXP boxH, SEXP normalize, SEXP border) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_boxblur(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(boxW), cpp11::as_cpp<cpp11::decay_t<int>>(boxH), cpp11::as_cpp<cpp11::decay_t<bool>>(normalize), cpp11::as_cpp<cpp11::decay_t<int>>(border)));
  END_CPP11
}
// blur.cpp
cpp11::raws azny_gaussianblur(cpp11::raws png, int boxW, int boxH, double sigmaX, double sigmaY, int border);
extern "C" SEXP _aznyan_azny_gaussianblur(SEXP png, SEXP boxW, SEXP boxH, SEXP sigmaX, SEXP sigmaY, SEXP border) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_gaussianblur(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(boxW), cpp11::as_cpp<cpp11::decay_t<int>>(boxH), cpp11::as_cpp<cpp11::decay_t<double>>(sigmaX), cpp11::as_cpp<cpp11::decay_t<double>>(sigmaY), cpp11::as_cpp<cpp11::decay_t<int>>(border)));
  END_CPP11
}
// blur.cpp
cpp11::raws azny_bilateralblur(cpp11::raws png, int d, double sigmacolor, double sigmaspace, int border, bool alphasync);
extern "C" SEXP _aznyan_azny_bilateralblur(SEXP png, SEXP d, SEXP sigmacolor, SEXP sigmaspace, SEXP border, SEXP alphasync) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_bilateralblur(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(d), cpp11::as_cpp<cpp11::decay_t<double>>(sigmacolor), cpp11::as_cpp<cpp11::decay_t<double>>(sigmaspace), cpp11::as_cpp<cpp11::decay_t<int>>(border), cpp11::as_cpp<cpp11::decay_t<bool>>(alphasync)));
  END_CPP11
}
// diffusion.cpp
cpp11::raws azny_diffusion(cpp11::raws png, int iter, float decay_factor, float decay_offset, float gamma, int sigma);
extern "C" SEXP _aznyan_azny_diffusion(SEXP png, SEXP iter, SEXP decay_factor, SEXP decay_offset, SEXP gamma, SEXP sigma) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_diffusion(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(iter), cpp11::as_cpp<cpp11::decay_t<float>>(decay_factor), cpp11::as_cpp<cpp11::decay_t<float>>(decay_offset), cpp11::as_cpp<cpp11::decay_t<float>>(gamma), cpp11::as_cpp<cpp11::decay_t<int>>(sigma)));
  END_CPP11
}
// edge-canny.cpp
cpp11::raws azny_cannyfilter(cpp11::raws png, int asize, bool balp, bool gradient, double thres1, double thres2);
extern "C" SEXP _aznyan_azny_cannyfilter(SEXP png, SEXP asize, SEXP balp, SEXP gradient, SEXP thres1, SEXP thres2) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_cannyfilter(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(asize), cpp11::as_cpp<cpp11::decay_t<bool>>(balp), cpp11::as_cpp<cpp11::decay_t<bool>>(gradient), cpp11::as_cpp<cpp11::decay_t<double>>(thres1), cpp11::as_cpp<cpp11::decay_t<double>>(thres2)));
  END_CPP11
}
// edge-canny.cpp
cpp11::raws azny_cannyrgb(cpp11::raws png, int asize, bool balp, bool gradient, double thres1, double thres2);
extern "C" SEXP _aznyan_azny_cannyrgb(SEXP png, SEXP asize, SEXP balp, SEXP gradient, SEXP thres1, SEXP thres2) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_cannyrgb(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(asize), cpp11::as_cpp<cpp11::decay_t<bool>>(balp), cpp11::as_cpp<cpp11::decay_t<bool>>(gradient), cpp11::as_cpp<cpp11::decay_t<double>>(thres1), cpp11::as_cpp<cpp11::decay_t<double>>(thres2)));
  END_CPP11
}
// edge-laplacian.cpp
cpp11::raws azny_laplacianfilter(cpp11::raws png, int ksize, bool balp, int border, double scale, double delta);
extern "C" SEXP _aznyan_azny_laplacianfilter(SEXP png, SEXP ksize, SEXP balp, SEXP border, SEXP scale, SEXP delta) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_laplacianfilter(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(ksize), cpp11::as_cpp<cpp11::decay_t<bool>>(balp), cpp11::as_cpp<cpp11::decay_t<int>>(border), cpp11::as_cpp<cpp11::decay_t<double>>(scale), cpp11::as_cpp<cpp11::decay_t<double>>(delta)));
  END_CPP11
}
// edge-laplacian.cpp
cpp11::raws azny_laplacianrgb(cpp11::raws png, int ksize, bool balp, int border, double scale, double delta);
extern "C" SEXP _aznyan_azny_laplacianrgb(SEXP png, SEXP ksize, SEXP balp, SEXP border, SEXP scale, SEXP delta) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_laplacianrgb(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(ksize), cpp11::as_cpp<cpp11::decay_t<bool>>(balp), cpp11::as_cpp<cpp11::decay_t<int>>(border), cpp11::as_cpp<cpp11::decay_t<double>>(scale), cpp11::as_cpp<cpp11::decay_t<double>>(delta)));
  END_CPP11
}
// edge-sobel.cpp
cpp11::raws azny_sobelfilter(cpp11::raws png, int ksize, bool balp, int dx, int dy, int border, double scale, double delta);
extern "C" SEXP _aznyan_azny_sobelfilter(SEXP png, SEXP ksize, SEXP balp, SEXP dx, SEXP dy, SEXP border, SEXP scale, SEXP delta) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_sobelfilter(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(ksize), cpp11::as_cpp<cpp11::decay_t<bool>>(balp), cpp11::as_cpp<cpp11::decay_t<int>>(dx), cpp11::as_cpp<cpp11::decay_t<int>>(dy), cpp11::as_cpp<cpp11::decay_t<int>>(border), cpp11::as_cpp<cpp11::decay_t<double>>(scale), cpp11::as_cpp<cpp11::decay_t<double>>(delta)));
  END_CPP11
}
// edge-sobel.cpp
cpp11::raws azny_sobelrgb(cpp11::raws png, int ksize, bool balp, int dx, int dy, int border, double scale, double delta);
extern "C" SEXP _aznyan_azny_sobelrgb(SEXP png, SEXP ksize, SEXP balp, SEXP dx, SEXP dy, SEXP border, SEXP scale, SEXP delta) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_sobelrgb(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(ksize), cpp11::as_cpp<cpp11::decay_t<bool>>(balp), cpp11::as_cpp<cpp11::decay_t<int>>(dx), cpp11::as_cpp<cpp11::decay_t<int>>(dy), cpp11::as_cpp<cpp11::decay_t<int>>(border), cpp11::as_cpp<cpp11::decay_t<double>>(scale), cpp11::as_cpp<cpp11::decay_t<double>>(delta)));
  END_CPP11
}
// lut.cpp
bool azny_write_smcube(const std::string& input_path, const std::string& output_path);
extern "C" SEXP _aznyan_azny_write_smcube(SEXP input_path, SEXP output_path) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_write_smcube(cpp11::as_cpp<cpp11::decay_t<const std::string&>>(input_path), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(output_path)));
  END_CPP11
}
// lut.cpp
cpp11::doubles azny_read_cube(const std::string& file_path, bool verbose);
extern "C" SEXP _aznyan_azny_read_cube(SEXP file_path, SEXP verbose) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_read_cube(cpp11::as_cpp<cpp11::decay_t<const std::string&>>(file_path), cpp11::as_cpp<cpp11::decay_t<bool>>(verbose)));
  END_CPP11
}
// lut.cpp
cpp11::raws azny_apply_cube(cpp11::raws png, cpp11::doubles_matrix<> lut_data, int cube_size, double intensity, bool is_r_fastest);
extern "C" SEXP _aznyan_azny_apply_cube(SEXP png, SEXP lut_data, SEXP cube_size, SEXP intensity, SEXP is_r_fastest) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_apply_cube(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles_matrix<>>>(lut_data), cpp11::as_cpp<cpp11::decay_t<int>>(cube_size), cpp11::as_cpp<cpp11::decay_t<double>>(intensity), cpp11::as_cpp<cpp11::decay_t<bool>>(is_r_fastest)));
  END_CPP11
}
// lut.cpp
cpp11::doubles azny_decode_rec709(const std::vector<double>& in_vec);
extern "C" SEXP _aznyan_azny_decode_rec709(SEXP in_vec) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_decode_rec709(cpp11::as_cpp<cpp11::decay_t<const std::vector<double>&>>(in_vec)));
  END_CPP11
}
// lut.cpp
cpp11::doubles azny_encode_rec709(const std::vector<double>& in_vec);
extern "C" SEXP _aznyan_azny_encode_rec709(SEXP in_vec) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_encode_rec709(cpp11::as_cpp<cpp11::decay_t<const std::vector<double>&>>(in_vec)));
  END_CPP11
}
// misc.cpp
cpp11::raws azny_swap_channels(cpp11::raws png, cpp11::integers mapping);
extern "C" SEXP _aznyan_azny_swap_channels(SEXP png, SEXP mapping) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_swap_channels(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(mapping)));
  END_CPP11
}
// misc.cpp
cpp11::raws azny_resize(cpp11::raws png, cpp11::doubles wh, int resize_mode, bool set_size);
extern "C" SEXP _aznyan_azny_resize(SEXP png, SEXP wh, SEXP resize_mode, SEXP set_size) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_resize(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(wh), cpp11::as_cpp<cpp11::decay_t<int>>(resize_mode), cpp11::as_cpp<cpp11::decay_t<bool>>(set_size)));
  END_CPP11
}
// misc.cpp
cpp11::raws azny_resample(cpp11::raws png, cpp11::doubles wh, int resize_red, int resize_exp);
extern "C" SEXP _aznyan_azny_resample(SEXP png, SEXP wh, SEXP resize_red, SEXP resize_exp) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_resample(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(wh), cpp11::as_cpp<cpp11::decay_t<int>>(resize_red), cpp11::as_cpp<cpp11::decay_t<int>>(resize_exp)));
  END_CPP11
}
// morph.cpp
cpp11::raws azny_morphologyfilter(cpp11::raws png, int ksize, int ktype, int mode, int iterations, int border, bool alphasync, cpp11::integers pt);
extern "C" SEXP _aznyan_azny_morphologyfilter(SEXP png, SEXP ksize, SEXP ktype, SEXP mode, SEXP iterations, SEXP border, SEXP alphasync, SEXP pt) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_morphologyfilter(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(ksize), cpp11::as_cpp<cpp11::decay_t<int>>(ktype), cpp11::as_cpp<cpp11::decay_t<int>>(mode), cpp11::as_cpp<cpp11::decay_t<int>>(iterations), cpp11::as_cpp<cpp11::decay_t<int>>(border), cpp11::as_cpp<cpp11::decay_t<bool>>(alphasync), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(pt)));
  END_CPP11
}
// morph.cpp
cpp11::raws azny_morphologyrgb(cpp11::raws png, cpp11::integers ksize, int ktype, int mode, int iterations, int border, bool alphasync, cpp11::integers pt);
extern "C" SEXP _aznyan_azny_morphologyrgb(SEXP png, SEXP ksize, SEXP ktype, SEXP mode, SEXP iterations, SEXP border, SEXP alphasync, SEXP pt) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_morphologyrgb(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(ksize), cpp11::as_cpp<cpp11::decay_t<int>>(ktype), cpp11::as_cpp<cpp11::decay_t<int>>(mode), cpp11::as_cpp<cpp11::decay_t<int>>(iterations), cpp11::as_cpp<cpp11::decay_t<int>>(border), cpp11::as_cpp<cpp11::decay_t<bool>>(alphasync), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(pt)));
  END_CPP11
}
// threshold.cpp
cpp11::raws azny_thres(cpp11::raws png, double thres, double maxv, int mode);
extern "C" SEXP _aznyan_azny_thres(SEXP png, SEXP thres, SEXP maxv, SEXP mode) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_thres(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<double>>(thres), cpp11::as_cpp<cpp11::decay_t<double>>(maxv), cpp11::as_cpp<cpp11::decay_t<int>>(mode)));
  END_CPP11
}
// threshold.cpp
cpp11::raws azny_adpthres(cpp11::raws png, int adpthres, double maxv, int bsize, int mode, double valC);
extern "C" SEXP _aznyan_azny_adpthres(SEXP png, SEXP adpthres, SEXP maxv, SEXP bsize, SEXP mode, SEXP valC) {
  BEGIN_CPP11
    return cpp11::as_sexp(azny_adpthres(cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(png), cpp11::as_cpp<cpp11::decay_t<int>>(adpthres), cpp11::as_cpp<cpp11::decay_t<double>>(maxv), cpp11::as_cpp<cpp11::decay_t<int>>(bsize), cpp11::as_cpp<cpp11::decay_t<int>>(mode), cpp11::as_cpp<cpp11::decay_t<double>>(valC)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_aznyan_azny_adpthres",         (DL_FUNC) &_aznyan_azny_adpthres,         6},
    {"_aznyan_azny_apply_cube",       (DL_FUNC) &_aznyan_azny_apply_cube,       5},
    {"_aznyan_azny_bilateralblur",    (DL_FUNC) &_aznyan_azny_bilateralblur,    6},
    {"_aznyan_azny_boxblur",          (DL_FUNC) &_aznyan_azny_boxblur,          5},
    {"_aznyan_azny_cannyfilter",      (DL_FUNC) &_aznyan_azny_cannyfilter,      6},
    {"_aznyan_azny_cannyrgb",         (DL_FUNC) &_aznyan_azny_cannyrgb,         6},
    {"_aznyan_azny_decode_rec709",    (DL_FUNC) &_aznyan_azny_decode_rec709,    1},
    {"_aznyan_azny_diffusion",        (DL_FUNC) &_aznyan_azny_diffusion,        6},
    {"_aznyan_azny_encode_rec709",    (DL_FUNC) &_aznyan_azny_encode_rec709,    1},
    {"_aznyan_azny_gaussianblur",     (DL_FUNC) &_aznyan_azny_gaussianblur,     6},
    {"_aznyan_azny_laplacianfilter",  (DL_FUNC) &_aznyan_azny_laplacianfilter,  6},
    {"_aznyan_azny_laplacianrgb",     (DL_FUNC) &_aznyan_azny_laplacianrgb,     6},
    {"_aznyan_azny_medianblur",       (DL_FUNC) &_aznyan_azny_medianblur,       2},
    {"_aznyan_azny_morphologyfilter", (DL_FUNC) &_aznyan_azny_morphologyfilter, 8},
    {"_aznyan_azny_morphologyrgb",    (DL_FUNC) &_aznyan_azny_morphologyrgb,    8},
    {"_aznyan_azny_read_cube",        (DL_FUNC) &_aznyan_azny_read_cube,        2},
    {"_aznyan_azny_resample",         (DL_FUNC) &_aznyan_azny_resample,         4},
    {"_aznyan_azny_resize",           (DL_FUNC) &_aznyan_azny_resize,           4},
    {"_aznyan_azny_sobelfilter",      (DL_FUNC) &_aznyan_azny_sobelfilter,      8},
    {"_aznyan_azny_sobelrgb",         (DL_FUNC) &_aznyan_azny_sobelrgb,         8},
    {"_aznyan_azny_swap_channels",    (DL_FUNC) &_aznyan_azny_swap_channels,    2},
    {"_aznyan_azny_thres",            (DL_FUNC) &_aznyan_azny_thres,            4},
    {"_aznyan_azny_write_smcube",     (DL_FUNC) &_aznyan_azny_write_smcube,     2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_aznyan(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
